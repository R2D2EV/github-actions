name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
    # Se debe definir antes el step para el cache de la instalción:
      - name: Cache dependencies
        uses: actions/cache@v3
        # Se requiere todos los archivos que se necesitaran en cache.
        with:
          path: ~/.npm
        # Además necesitamos de un indicador para recuperar la cache en el futuro y recrear esa carpeta
        # Pero también indicará si debemos descarta, y crearla nuevamente pues las dependencias han cambiado.
        # Para utilizarlos en los demás jobs bastsa con copiar y pegar en ellos.
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    # Para que el output esté disponible para otros trabajos debemos añadir (2):
    outputs:
        # Este es el parámetro con el que se podrá acceder más adelante, la var depende de ti.
      script-file: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
        # Para que los outputs puedan ser utilizados en posteriores jobs (1):
      - name: Publish JS filename
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
        # Para almacenar nuevos artifacts, sólo necesitamos agregar otro step:
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: |
            dist
            package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
        # Los artifacts producidos anteriomente no existen automáticamente en otro job
        # pues cada se ejecuta en una VM, para añadirlos:
      - name: Get build artifacts 
        uses: actions/download-artifact@v4
        with:
          name: dist-files
      - name: Output contents
        run: ls
        # Para utilizar el output (3):
      - name: Output filename
        run: echo "{{ needs.build.outputs.script-file }}""

      - name: Deploy
        run: echo "Deploying..."
